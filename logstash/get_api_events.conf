input {
  pipeline {
    address => "api-events"
  }
}

filter {

  # Get the starting date - 1 year before now_ms
  ruby {
    code => "
      event.set('start_time_ms', event.get('now_ms') - 31536000000)
    "
  }

  date {
    match => ["now_ms", "UNIX_MS"]
    target => "now_formatted"
  }

  date {
    match => ["start_time_ms", "UNIX_MS"]
    target => "start_time_formatted"
  }

  # Get API events
  http {
    connect_timeout => 120
    request_timeout => 120
    socket_timeout => 120
    url => "https://anypoint.mulesoft.com/analytics/1.0/%{organization_id}/events?format=json&startDate=%{start_time_formatted}&endDate=%{now_formatted}&fields=Timestamp,API%20ID,API%20Version%20ID,Application,Message%20ID,Request%20Size,Response%20Size,Response%20Time,Browser,User%20Agent%20Name,User%20Agent%20Version,OS%20Family,OS%20Version,Hardware%20Platform,Timezone,OS%20Minor%20Version,OS%20Major%20Version,City,Client%20IP,Continent,Postal%20Code,Verb,Country,Resource%20Path,Status%20Code,Request%20Outcome,Runtime%20Host,Violated%20Policy%20Name,API%20Name,API%20Version%20Name,Application%20Name"
    verb => GET
    headers => {
      Authorization => "Bearer %{access_token}"
    }
  }

  # Drop all empty bodies and error responses
  if "_httprequestfailure" in [tags] or [body.length] == 0 {
    drop {}
  }

  # Split the records and remap
  split {
    field => "body"
  }

  prune {
    whitelist_names => ["body", "environment_id", "environment_name", "@version"]
  }

  mutate {
    rename => { "[body][API Name]" => "api_name" }
    rename => { "[body][Postal Code]" => "postal_code" }
    rename => { "[body][Verb]" => "verb" }
    rename => { "[body][Browser]" => "browser" }
    rename => { "[body][Request Size]" => "request_size" }
    rename => { "[body][Client IP]" => "client_ip" }
    rename => { "[body][OS Minor Version]" => "os_minor_version" }
    rename => { "[body][Message ID]" => "message_id" }
    rename => { "[body][API ID]" => "api_id" }
    rename => { "[body][User Agent Version]" => "user_agent_version" }
    rename => { "[body][Application]" => "application" }
    rename => { "[body][Hardware Platform]" => "hw_platform" }
    rename => { "[body][Request Outcome]" => "request_outcome" }
    rename => { "[body][City]" => "city" }
    rename => { "[body][Timezone]" => "timezone" }
    rename => { "[body][Country]" => "country" }
    rename => { "[body][API Version ID]" => "api_version_id" }
    rename => { "[body][Resource Path]" => "resource_path" }
    rename => { "[body][User Agent Name]" => "user_agent_name" }
    rename => { "[body][OS Family]" => "os_family" }
    rename => { "[body][Application Name]" => "application_name" }
    rename => { "[body][OS Version]" => "os_version" }
    rename => { "[body][API Version Name]" => "api_version_name" }
    rename => { "[body][Status Code]" => "status_code" }
    rename => { "[body][Continent]" => "continent" }
    rename => { "[body][Runtime Host]" => "runtime_host" }
    rename => { "[body][Response Time]" => "response_time" }
    rename => { "[body][OS Major Version]" => "os_major_version" }
    rename => { "[body][Timestamp]" => "request_timestamp" }
    rename => { "[body][Response Size]" => "response_size" }
    rename => { "[body][Violated Policy Name]" => "violated_policy_name" }
  }

  prune {
    blacklist_names => ["body"]
  }

  date {
    match => [ "request_timestamp", "ISO8601" ]
  }

}

output {
  stdout { codec => rubydebug }
  elasticsearch {
    hosts => ["${ES_HOST:http\://localhost:9200}"]
    index => "apievents-%{+YYYY.MM.dd}"
    user => "${ES_USER:elastic}"
    password => "${ES_PASS:changeme}"

  #   # manage_template => true
  #   # template => "templates/filebeat_template.json"
  #   # template_name => "filebeat-*"
  #   # template_overwrite => true
  }
}
