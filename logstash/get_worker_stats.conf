input {
  pipeline {
    address => "worker_stats"
  }
}

filter {
  # 1. Get applications
  http {
    url => "https://anypoint.mulesoft.com/cloudhub/api/v2/applications"
    verb => GET
    headers => {
      Authorization => "Bearer %{access_token}"
      "X-ANYPNT-ENV-ID" => "%{environment_id}"
      "Content-Type" => "application/json"
    }
  }
  # Split and create separate events for every application record
  split {
    field => "[body]"
  }
  mutate {
    add_field => {
      app_name => "%{[body][domain]}"
    }
  }
  prune {
    whitelist_names => [ "now_ms", "access_token", "organization_id", "environment_id", "environment.name", "deployment_id", "app_name"]
  }

  # 2. Get application worker stats

  # Get latest_timestamp
  elasticsearch {
    hosts => ["${ES_HOST:http://localhost:9200}"]
    index => "workerstats-*"
    user => "${ES_USER:}"
    password => "${ES_PASS:}"
    query => "app_name: %{app_name}"
    result_size => 1
    sort => "@timestamp:desc"
    fields => {
      "@timestamp" => "latest_timestamp"
    }
  }

  # First call
  if !("" in [latest_timestamp]) {
    http {
      connect_timeout => 120
      request_timeout => 120
      socket_timeout => 120
      url => "https://anypoint.mulesoft.com/cloudhub/api/v2/applications/%{app_name}/dashboardStats"
      verb => GET
      headers => {
        Authorization => "Bearer %{access_token}"
        "X-ANYPNT-ENV-ID" => "%{environment_id}"
        "Content-Type" => "application/json"
      }
    }
  } else {
    date {
      match => ["latest_timestamp", "ISO8601"]
      target => "latest_timestamp_formatted"
    }

    http {
      connect_timeout => 120
      request_timeout => 120
      socket_timeout => 120
      url => "https://anypoint.mulesoft.com/cloudhub/api/v2/applications/%{app_name}/dashboardStats?startDate=%{latest_timestamp_formatted}"
      verb => GET
      headers => {
        Authorization => "Bearer %{access_token}"
        "X-ANYPNT-ENV-ID" => "%{environment_id}"
        "Content-Type" => "application/json"
      }
    }
  }

  # Drop all empty bodies and error responses
  if "_httprequestfailure" in [tags] or [body.length] == 0 {
    drop {}
  }

  # 3. Parse payload
  ruby {
    code => "

      events_collection = []

      body = event.get('body')
      body['events'].each{|k, v|
        events = {}

        events['timestamp'] = k
        events['value'] = v
        events['val_type'] = 'events'

        events_collection << events
      }

      body['workerStatistics'].each{|worker|
        worker_id = worker['id']
        worker['statistics'].each{|val_type, stat|
          begin
            stat.each{|time, value|
              events = {}

              events['timestamp'] = time
              events['worker'] = worker_id
              events['val_type'] = val_type
              events['value'] = value

              events_collection << events
            }
          rescue
          end
        }
      }

      event.set('events', events_collection)
    "
  }

  prune {
    blacklist_names => ["body", "headers", "access_token", "latest_timestamp"]
  }

  split {
    field => "[events]"
  }

  mutate {
    rename => { "[events][worker]" => "worker" }
    rename => { "[events][timestamp]" => "orig_timestamp" }
    rename => { "[events][val_type]" => "val_type" }
    rename => { "[events][value]" => "value" }
    rename => { "[organization_id]" => "organization.id" }
    rename => { "[environment_id]" => "environment.id" }
    rename => { "[environment_name]" => "environment.name" }
  }

  date {
    match => [ "orig_timestamp", "UNIX_MS" ]
  }

  prune {
    blacklist_names => ["orig_timestamp", "events", "now_ms"]
  }
}

output {
  # stdout { codec => rubydebug }
  elasticsearch {
    hosts => ["${ES_HOST:http://localhost:9200}"]
    index => "workerstats-%{+YYYY.MM.dd}"
    user => "${ES_USER:}"
    password => "${ES_PASS:}"
    manage_template => true
    template => "templates/workerstats_template.json"
    template_name => "workerstats"
    template_overwrite => true
  }
}
