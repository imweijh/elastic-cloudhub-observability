# Prerequisites
#  bin/logstash-plugin install logstash-filter-prune
#  bin/logstash-plugin install logstash-filter-http
#  bin/logstash-plugin install logstash-filter-split
#  bin/logstash-plugin install logstash-filter-geoip

input {

  # 1. Kick off with the login poll
  http_poller {
    urls => {
      login => {
        # Supports all options supported by ruby's Manticore HTTP client
        method => post
        url => "https://anypoint.mulesoft.com/accounts/login"
        headers => {
          "Content-Type" => "application/x-www-form-urlencoded"
        }
        body => "username=${CH_USER}&password=${CH_PASSWORD}"
     }
    }
    request_timeout => 120
    # Supports "cron", "every", "at" and "in" schedules by rufus scheduler
    # schedule => { cron => "* * * * * UTC"}
    schedule => { "every" => "30s"}
    codec => "json"
    # A hash of request metadata info (timing, response headers, etc.) will be sent here
    # metadata_target => "http_poller_metadata"
  }
}

filter {
  ruby {
    code => "event.set('now_ms', Time.now.to_i * 1000)"
  }

  # After login, leave just the access_token
  prune {
    whitelist_names => [ "now_ms", "access_token" ]
  }


  # 2. Get organization.id
  http {
    url => "https://anypoint.mulesoft.com/accounts/api/me"
    verb => GET
    headers => {
      Authorization => "Bearer %{access_token}"
    }
  }
  mutate {
    add_field => {
      organization_id => "%{[body][user][organization][id]}"
    }
  }
  prune {
    whitelist_names => [ "now_ms", "access_token", "organization_id"]
  }


  # 3. Get environment_id
  http {
    url => "https://anypoint.mulesoft.com/accounts/api/organizations/%{organization_id}/environments"
    verb => GET
    headers => {
      Authorization => "Bearer %{access_token}"
    }
  }
  #   {
  #     "data": [
  #         {
  #             "id": "ef631804-77e7-4dc0-a1e2-a18aaa256ea7",
  #             "name": "Design",
  #             "organizationId": "28ed3785-e975-414e-ac98-275c74e5a249",
  #             "isProduction": false,
  #             "type": "design",
  #             "clientId": "5f4919135f27450ab92cae2661d3d2df"
  #         },
  #         {
  #             "id": "9ecd6373-7d0c-45a0-974b-c5caa72ea9ab",
  #             "name": "Production",
  #             "organizationId": "28ed3785-e975-414e-ac98-275c74e5a249",
  #             "isProduction": true,
  #             "type": "production",
  #             "clientId": "87df2875707c4cf1b6f6cda246a5ff18"
  #         }
  #     ],
  #     "total": 3
  # }
  ruby {
    code => "
    value = event.get('body')['data'].find {|h| h['name'] == '${CH_ENV:Production}'}['id']
    event.set('environment_id', value)
    "
  }
  prune {
    whitelist_names => [ "now_ms", "access_token", "organization_id", "environment_id"]
    add_field => {
      "environment_name" => "${CH_ENV:Production}"
    }
  }
}

output {
  pipeline {
    #Control from here which pipelines get invoked
    send_to => ["logs", "api-events", "worker_stats"]
    # send_to => ["api-events"]
    # send_to => ["worker_stats"]
  }
}
